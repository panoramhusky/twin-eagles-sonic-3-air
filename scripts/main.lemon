#if GAMEAPP >= 0x25021500
include renderhooks
include character
include character_graphics
include render_character
include health_system
include items
include intro
include object_interactions
include jump_off
include mario
include badniks
include fuckles
include continue

include outro

global u8 tesonic.palette
global u8 tesonic.color_scheme
global u8 tesonic.game_rng

constant u8 CHARS_TESONIC = 1 // for global.characters

constant u8 CHARACTER_TESONIC = 0 // for checks

function void Init()
{
	tesonic.game_rng = 0 + (System.rand() % 0xff)
	System.setGlobalVariableValueByName("MFT_ContinueFont", 0)
	base.Init()
}

function void ActSelect.DrawMenu(u8 selectedEntry, u8 selectedZone, u8 selectedAct, s16 anchorX)
{
	if (levelselect.characters <= 1)
	{
		if (global.characters != levelselect.characters)
		{
			tesonic.game_rng = 0 + (System.rand() % 0xff)
			global.characters = levelselect.characters
		}
		
		s16 px = max(anchorX - 125, 52)		// Move to the right in 4:3
		
		SpriteHandle sonic = Renderer.addSpriteHandle(ActSelect.GetCharacterCombinationSprite(levelselect.characters), px, 156, 0xf005)
		sonic.setFlags(0)
		sonic.setPalette(getCharacterPaletteKey(0), 0)
		//debugLog("test")
	}
	
	base.ActSelect.DrawMenu(selectedEntry, selectedZone, selectedAct, anchorX)
}

function void LevelSelect.init()
{
	loadCharacterPalette(CHARACTER_SONIC,    0x802180, 0)
	loadCharacterPalette(CHARACTER_SONIC,    0x802000, 0)
	base.LevelSelect.init()
}

function string ActSelect.GetCharacterCombinationSprite(u8 index)
{
	if (index <= 1)
		return "menu_characters_sonic"
		
	return base.ActSelect.GetCharacterCombinationSprite(index)
}

function string ActSelect.GetCharacterCombinationName(u8 index)
{
	if (index == 0)
		return "Twin Eagles Sonic"
	else if (index == 1)
		return "Twin Eagles Sonic\n        (again)"

	return base.ActSelect.GetCharacterCombinationName(index)
}

//# address-hook(0x2332fa)
function void FAKE_DUST_CLOUD_BECAUSE_REGULAR_DUST_CLOUD_CODE_SUCKS()
{
	objA0.position.x.u16 -= u16[0xffffeebc]
	DrawObject()
	UpdateMovementStraightSimple()
	++objA0.animation.timer
	if (objA0.animation.timer > 3)
	{
		if (objA0.animation.sprite < 3)
			++objA0.animation.sprite
		else
		{
			UnloadObject()
			return
		}
			
		objA0.animation.timer = 0
	}
}

//# address-hook(0x0011ca) end(0x0012cc)
function void fn0011ca()
{
	if (levelselect.characters == CHARS_SONIC_AND_TAILS && u8[0xffffe654] == 0)
	{
		// no partner tails for you lol
		levelselect.characters = CHARS_TESONIC
		global.characters = CHARS_TESONIC
	}
	base.fn0011ca()
}

function string getCharacterLivesIcon(u8 character)
{
	s64 backup = A1 // backing up and restoring A1 is necessary otherwise the game may implode
	A1 = 0xffffb000
	
	if (TESonic.isTESonic(A1))
	{
		A1 = backup
		u8 palette = tesonic.palette
		
		if (palette == 0xff)
			palette = (tesonic.game_rng % 6)
		
		// this probably could have been done better but idgaf rn
		if (palette == 0x00)
		{
			return "hud_lives_icon_tesonic"
		}
		else if (palette == 0x01)
		{
			return "hud_lives_icon_tesonic_s2"
		}
		else if (palette == 0x02)
		{
			return "hud_lives_icon_tesonic_s6"
		}
		else if (palette == 0x03)
		{
			return "hud_lives_icon_tesonic_s3d5"
		}
		else if (palette == 0x04)
		{
			return "hud_lives_icon_tesonic_sj6"
		}
		else if (palette == 0x05)
		{
			return "hud_lives_icon_tesonic_scc"
		}
		else //Failsafe
			return "hud_lives_icon_tesonic_sj6"
	}
	
	A1 = backup
	
	return base.getCharacterLivesIcon(character)
}

function string getCharacterBonusTextIcon(u8 character)
{
	s64 backup = A1 // backing up and restoring A1 is necessary otherwise the game may implode
	A1 = 0xffffb000
	
	if (TESonic.isTESonic(A1))
	{
		A1 = backup
		u8 palette = tesonic.palette
		
		if (palette == 0xff)
			palette = (tesonic.game_rng % 6)
		
		// this probably could have been done better but idgaf rn
		if (palette == 0x00)
		{
			return "hud_bonus_icon_teblue"
		}
		else if (palette == 0x01)
		{
			return "hud_bonus_icon_teblue_s2"
		}
		else if (palette == 0x02)
		{
			return "hud_bonus_icon_teblue_s6"
		}
		else if (palette == 0x03)
		{
			return "hud_bonus_icon_teblue_s3d5"
		}
		else if (palette == 0x04)
		{
			return "hud_bonus_icon_teblue_sj6"
		}
		else if (palette == 0x05)
		{
			return "hud_bonus_icon_teblue_scc"
		}
		else //Failsafe
			return "hud_bonus_icon_teblue_s6"
	}
	
	A1 = backup
	
	return base.getCharacterBonusTextIcon(character)
}

function string getCharacterContinueIcon(u8 character)
{
	s64 backup = A1 // backing up and restoring A1 is necessary otherwise the game may implode
	A1 = 0xffffb000
	
	if (TESonic.isTESonic(A1))
	{
		A1 = backup
		u8 palette = tesonic.palette
		
		if (palette == 0xff)
			palette = (tesonic.game_rng % 6)
		
		// this probably could have been done better but idgaf rn
		if (palette == 0x00)
		{
			return "continue_icon_tesonic"
		}
		else if (palette == 0x01)
		{
			return "continue_icon_tesonic_s2"
		}
		else if (palette == 0x02)
		{
			return "continue_icon_tesonic_s6"
		}
		else if (palette == 0x03)
		{
			return "continue_icon_tesonic_s3d5"
		}
		else if (palette == 0x04)
		{
			return "continue_icon_tesonic_sj6"
		}
		else if (palette == 0x05)
		{
			return "continue_icon_tesonic_scc"
		}
		else //Failsafe
			return "continue_icon_tesonic_s3d5"
	}
	
	A1 = backup
	
	return base.getCharacterContinueIcon(character)
}

function string getCharacterResultsNameplate(u8 character)
{
	s64 backup = A1 // backing up and restoring A1 is necessary otherwise the game may implode
	A1 = 0xffffb000
	
	if (TESonic.isTESonic(A1))
	{
		A1 = backup
		u8 palette = tesonic.palette
		
		if (palette == 0xff)
			palette = (tesonic.game_rng % 6)
		
		// this probably could have been done better but idgaf rn
		if (palette == 0x00)
		{
			return "result_nameplate_tesonic"
		}
		else if (palette == 0x01)
		{
			return "result_nameplate_tesonic_s2"
		}
		else if (palette == 0x02)
		{
			return "result_nameplate_tesonic_s6"
		}
		else if (palette == 0x03)
		{
			return "result_nameplate_tesonic_s3d5"
		}
		else if (palette == 0x04)
		{
			return "result_nameplate_tesonic_sj6"
		}
		else if (palette == 0x05)
		{
			return "result_nameplate_tesonic_scc"
		}
		else //Failsafe
			return ""
	}
	
	return base.getCharacterResultsNameplate(character)
}

function string getCharacterPaletteKey(u8 character)
{
	s64 backup = A1 // backing up and restoring A1 is necessary otherwise the game may implode
	A1 = 0xffffb000
	if (character == CHARACTER_TESONIC && global.characters <= 1 && u8[0xffffe654] == 0)
	{
		A1 = backup
		if (tesonic.palette != 0xff)
			return TESonic.getPaletteType(tesonic.palette)
		else
		{
			u8 random = (tesonic.game_rng % 6)
			return TESonic.getPaletteType(random)
		}

	}
	
	A1 = backup

	return base.getCharacterPaletteKey(character)
}

function string getCharacterBluespherePaletteKey(u8 character)
{
	s64 backup = A1 // backing up and restoring A1 is necessary otherwise the game may implode
	A1 = 0xffffb000
	if (character == CHARACTER_TESONIC && global.characters <= 1 && u8[0xffffe654] == 0)
	{
		return getCharacterPaletteKey(character)
	}
	
	A1 = backup
	
	return base.getCharacterBluespherePaletteKey(character)
}

function string TESonic.getPaletteType(u8 palette)
{
	// this probably could have been done better with a stringformat but idgaf rn
	if (palette == 0x00)
	{
		if (tesonic.color_scheme == 0)
			return "character_palette_sonic_s4_r"
		else
			return "character_palette_sonic_s4"
	}
	else if (palette == 0x01)
	{
		if (tesonic.color_scheme == 0)
			return "character_palette_sonic_s2_r"
		else
			return "character_palette_sonic_s2"
	}
	else if (palette == 0x02)
	{
		if (tesonic.color_scheme == 0)
			return "character_palette_sonic_s6_r"
		else
			return "character_palette_sonic_s6"
	}
	else if (palette == 0x03)
	{
		if (tesonic.color_scheme == 0)
			return "character_palette_sonic_s3d5_r"
		else
			return "character_palette_sonic_s3d5"
	}
	else if (palette == 0x04)
	{
		// we don't need a rendered check here because the palette is already a genesis palette! :D
			return "character_palette_sonic_sj6"
	}
	else if (palette == 0x05)
	{
		if (tesonic.color_scheme == 0)
			return "character_palette_sonic_classic_r"
		else
			return "character_palette_sonic_classic"
	}
	else //Failsafe, might end up making this the broken s4 results palette for shits and giggles later
		return "character_palette_sonic_s4_r"
}



function void UpdatePaletteEffects.SuperForm.moddingVersion(u8 characterVersion)
{
	s64 backup = A1 // backing up and restoring A1 is necessary otherwise the game may implode
	A1 = 0xffffb000
	if (isMainCharacter(CHARACTER_TESONIC) && u8[0xffffe654] == 0)
	{
		A1 = backup
		TESonic.updateHyperPalette(characterVersion) // oh jesus
	}
	else
	{
		A1 = backup
		base.UpdatePaletteEffects.SuperForm.moddingVersion(CHARACTER_TESONIC)
	}
}

function void TESonic.updateHyperPalette(u8 characterVersion)
{
	if (super.palettefx.state & 0x80)
	{
		// Update ongoing palette effect
		u8 character = CHARACTER_TESONIC
		bool isHyperEffect = (super.active == 0xff)
		u16 nextFrame = (super.palettefx.frame + 6) % (isHyperEffect ? 108 : 18)
		u16 blendFactor = super.palettefx.timer * 0x100 / (isHyperEffect ? 0x07 : 0x0f)

		if (nextFrame % 18 == 0)
			blendFactor = 0x100 - blendFactor
		else if (nextFrame % 18 == 12)
			blendFactor = 0

		if ((super.palettefx.timer % 4) == 0)
		{
			for (u8 underwater = 0; underwater < (level.water_present ? 2 : 1); ++underwater)
			{
				u32 offset = character * 0x40 + (underwater ? 0x300 : 0)
				u32 source = 0x802180 + offset
				u32 dest   = 0x802000 + offset

				// Load modded Super palette
				u8 line = getModdedPaletteLine(character, isHyperEffect, underwater)

				zeroMemory(dest, 0x40)
				u16 numColors = System.loadExternalPaletteData(getCharacterPaletteKey(character), line, 0x800000, 0x20)
				for (u16 i = 0; i < numColors; ++i)
				{
					u32 rgba = u32[0x800000 + i * 4]
					u16[dest + i * 2] = (rgba & 0xff000000) ? packColorExt(rgba) : 0
				}

				for (u8 k = 0; k < 0x40; k += 2)
				{
					if (u16[dest + k] == 0)
					{
						// Use original color as fallback
						u16[dest + k] = u16[source + k]
					}
					else
					{
						// Apply flash effect
						u16[dest + k] = blendColorsPacked(u16[dest + k], 0x0eee, blendFactor)
					}
				}
			}
		}

		--super.palettefx.timer
		if (super.palettefx.timer < 0)
		{
			super.palettefx.timer = isHyperEffect ? 0x07 : 0x0f
			super.palettefx.frame = nextFrame
		}
	}
	else if (super.palettefx.state == 1)
	{
		// Fade in
		u8 character = CHARACTER_TESONIC
		bool isHyperEffect = (super.active == 0xff)
		
		// Fix here for Tails and Knuckles #contributed by 3Pills (its for sonic too??)
		--super.palettefx.timer
		if (super.palettefx.timer >= 0)
			return

		// Fade in effect
		super.palettefx.frame += 6
		super.palettefx.timer = 1

		for (u8 underwater = 0; underwater < (level.water_present ? 2 : 1); ++underwater)
		{
			u16 blendFactor = clamp((super.palettefx.frame + (1 - super.palettefx.timer) * 6 / 2) * 0x100 / 0x24, 0, 0x100)

			u32 offset = character * 0x40 + (underwater ? 0x300 : 0)
			u32 source = 0x802180 + offset
			u32 dest   = 0x802000 + offset

			// Load modded Super palette
			u8 line = getModdedPaletteLine(character, isHyperEffect, underwater)

			zeroMemory(dest, 0x40)
			u16 numColors = System.loadExternalPaletteData(getCharacterPaletteKey(character), line, 0x800000, 0x20)
			for (u16 i = 0; i < numColors; ++i)
			{
				u32 rgba = u32[0x800000 + i * 4]
				u16[dest + i * 2] = (rgba & 0xff000000) ? packColorExt(rgba) : 0
			}

			for (u8 k = 0; k < 0x40; k += 2)
			{
				if (u16[dest + k] == 0)
				{
					// Use original color as fallback
					u16[dest + k] = u16[source + k]
				}
				else
				{
					// Apply flash effect
					u16[dest + k] = blendColorsPacked(u16[source + k], u16[dest + k], blendFactor)
				}
			}
		}

		if (super.palettefx.frame < 36) && (characterVersion <= 1)
			return

		// Fully faded in
		super.palettefx.state = 0xff
		u8[0xffffb000 + 0x2e] = 0		// Reset "char.control_flags"
	}
	else  // (super.palettefx.state == 2)
	{
		// Fade out
		if (super.palettefx.frame >= 30)
		{
			// This is the first frame, set everything so that only the timer is used
			super.palettefx.frame = 0
			super.palettefx.frame.tails = 0
			super.palettefx.timer = 0x11
		}

		u16 blendFactor = clamp(u16(super.palettefx.timer) * 0x100 / 0x12, 0, 0x100)
		for (u8 underwater = 0; underwater < (level.water_present ? 2 : 1); ++underwater)
		{
			u32 offset = getMainCharacter() * 0x40 + (underwater ? 0x300 : 0)
			u32 source = 0x802180 + offset
			u32 dest   = 0x802000 + offset

			for (u8 k = 0; k < 0x40; k += 2)
			{
				if (u16[dest + k] == 0)
				{
					// Use original color as fallback
					u16[dest + k] = u16[source + k]
				}
				else
				{
					// Apply flash effect
					u16[dest + k] = blendColorsPacked(u16[source + k], u16[dest + k], blendFactor)
				}
			}
		}

		if (super.palettefx.timer == 0)
		{
			// Fully faded out
			super.palettefx.state = 0
		}
		else
		{
			--super.palettefx.timer
		}
	}
}

function u64 Standalone.getModdedSoundKey(u64 soundKey, u8 sfxId, u8 soundRegType)
{
	s64 backup = A1 // backing up and restoring A1 is necessary otherwise the game explodes
	A1 = 0xffffb000
	
	if (TESonic.isTESonic(A1))
	{
		A1 = backup
		
		if (objA0.update_address == 0x010a94)
		{
			if (sfxId == SFX_BRAKE)
				soundKey = "te_skid"
			else if (sfxId == 0x35)
				soundKey = "te_hurt"
			else if (sfxId == SFX_JUMP)
				soundKey = "te_jump"
		}
		
		if (levelselect.characters == CHARS_TESONIC)
		{
			if (sfxId == MUSIC_BIGARMS)
				soundKey = "finalboss_te"
		
			if (sfxId == MUSIC_SUPER)
			{
				u8 configOption = Game.getSetting(SETTING_AUDIO_SUPER_THEME)
				if (configOption >= 2)
					soundKey = "supertheme_te"
			}
			
			if (sfxId == MUSIC_DDZ)
			{
				soundKey = "supertheme_te"
			}
			
			if ((sfxId == MUSIC_GAMEOVER || sfxId == MUSIC_CONTINUE) && (global.game_mode == 0x0c || global.game_mode == 0x14))
			{
				sfxId = MUSIC_CONTINUE
				soundKey = "gameover_te"
			}
		}
		
		if (soundKey != sfxId)
			return soundKey
	}
	
	A1 = backup
	
	return base.Standalone.getModdedSoundKey(soundKey, sfxId, soundRegType)
}

function bool TESonic.isTESonic(u32 address)
{
	if (u8[address + 0x38] == CHARACTER_TESONIC && global.characters == CHARS_TESONIC && u8[0xffffe654] == 0)
		return true
	else
		return false
}

function u32 TESonic.ScanandReturnAddressInRAM(u32 update_address)
{
	u32 ram_address = 0xffffb000
	for (u32 position = 0; position <= 0xffffffff; position += 0x4a)
	{
		A3 = ram_address + position
		if (u32[A3] == update_address)
		{
			break
		}
		else if (ram_address == 0xffffcf82)
		{
			// quick hack to stop for loop, probably a better way to do this
			A3 = 0
			string message = stringformat("Couldn't find update address %02x in any object slot", update_address)
			assert(false, message)
			break
		}
	}
	return A3
}

function bool TESonic.checkIfBombCollidingWithBoss()
{
	u16 px1 = objA0.position.x.u16 - 8
	u16 py1 = objA0.position.y.u16 - 4
	u16 bx1 = 16
	u16 by1 = 10
	
	u16 px2 = objA1.position.x.u16 - 16
	u16 py2 = objA1.position.y.u16 - 8
	u16 bx2 = 32
	u16 by2 = 32
	
	//Debug.drawRect(px1, py1, bx1, by1, 0x0000ff88)
	//Debug.drawRect(px2, py2, bx2, by2, 0xff000088)
	
	bool colliding = checkBoxOverlap(px1, py1, bx1, by1, px2, py2, bx2, by2)
	return colliding
}

function bool TESonic.checkIfBallCollidingWithBoss()
{
	u16 px1 = objA0.position.x.u16 - 8
	u16 py1 = objA0.position.y.u16 - 8
	u16 bx1 = 16
	u16 by1 = 16
	
	u16 px2 = objA1.position.x.u16 - 16
	u16 py2 = objA1.position.y.u16 - 16
	u16 bx2 = 32
	u16 by2 = 32
	
	//Debug.drawRect(px1, py1, bx1, by1, 0x0000ff88)
	//Debug.drawRect(px2, py2, bx2, by2, 0xff000088)
	
	bool colliding = checkBoxOverlap(px1, py1, bx1, by1, px2, py2, bx2, by2)
	return colliding
}


// mania signpost compat
function u16 getManiaInspSignpostSprAtex(string key)
{
	if (key == "maniainsp_signpost_sonic")
		return 0
		
	return base.getManiaInspSignpostSprAtex(key)
}
#else
function void Init()
{
	assert(false, "Please update to Sonic 3 A.I.R. test build v25.02.15.0 or later to play Twin Eagles Sonic.")
	base.Init()
}
#endif